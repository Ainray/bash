#!/bin/bash
# date: 20180127
# author: ainray
# little change from http://wiki.grzegorz.wierzowiecki.pl/code:mutex-in-bash

#lock dirs/files
lockdir="$2"
appid="$3"
pidfile="${lockdir}/pid"

# exit codes
ENO_SUCCESS=0; EXIT[0]="ENO_SUCCESS"
ENO_GENERAL=1; EXIT[1]="ENO_GENERAL"
ENO_LOCKFAIL=2; EXIT[2]="ENO_LOCKFAIL"
ENO_RECVSIG=3; EXIT[3]="ENO_RECVSIG"
# start un/locking attempt

function lock(){
    if ! kill -0 $appid &>/dev/null; then
        echo "calling app(pid=$apppid) is not  responding."
        return 1
    fi
    local lockdir="$1"
    if mkdir "${lockdir}" &>/dev/null; then
        #lock succeeded, store the PID
        echo "$appid" >"${pidfile}"
        return ${ENO_SUCCESS}
    else
        #lock failed, now check if the other PID is alive
        otherpid=$(cat "${pidfile}" 2>/dev/null)
        if [ $? !=0 ]; then
            return  ${ENO_LOCKFAIL}
        fi
        if ! kill -0 $otherpid &>/dev/null; then
            #lock is stable, remove it and restart
            unlock "$lockdir"
            lock "$lockdir"
            return $?
        else
            return ${ENO_LOCKFAIL}
        fi
    fi
    return 0
}
function unlock(){
    rm -rf "$1" &>/dev/null
    return $?
}
case "$1" in
    lock) lock "$lockdir" ; exit $? ;;
    unlock) unlock "$lockdir"; exit $?;;
    *) usage;;
esac








